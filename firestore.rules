rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Allow users to read and write their own user document
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Allow reading all doctors (for appointment booking)
    match /users/{userId} {
      allow read: if request.auth != null && resource.data.role == 'doctor';
    }
    
    // Doctor availability rules
    match /doctorAvailability/{doctorId} {
      // Anyone can read doctor availability
      allow read: if request.auth != null;
      // Only the doctor can update their availability
      allow write: if request.auth != null && request.auth.uid == doctorId;
    }
    
    // Appointments rules
    match /appointments/{appointmentId} {
      // Allow read if the user is the patient or doctor
      allow read: if request.auth != null && 
                  (request.auth.uid == resource.data.patientId || 
                   request.auth.uid == resource.data.doctorId);
      
      // Allow listing appointments for a specific doctor (for checking availability)
      allow list: if request.auth != null;
      
      // Allow create if the user is setting themselves as patient or doctor
      allow create: if request.auth != null && 
                    (request.auth.uid == request.resource.data.patientId || 
                     request.auth.uid == request.resource.data.doctorId);
      
      // Allow update if the user is the patient or doctor
      allow update: if request.auth != null && 
                    (request.auth.uid == resource.data.patientId || 
                     request.auth.uid == resource.data.doctorId);
    }
    
    // Conversations rules
    match /conversations/{conversationId} {
      // Allow read/write if the user is a participant in the conversation
      allow read, write: if request.auth != null && 
                          request.auth.uid in resource.data.participants;
      
      // Allow creation of new conversations if the user includes themselves as a participant
      allow create: if request.auth != null && 
                    request.auth.uid in request.resource.data.participants;
      
      // Messages subcollection rules
      match /messages/{messageId} {
        // Allow read/write if the user is a participant in the parent conversation
        allow read, write: if request.auth != null && 
                           request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
        
        // Allow file data in messages
        allow create, update: if request.auth != null && 
                             request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants &&
                             (request.resource.data.fileData == null || 
                              (request.resource.data.fileData.size <= 1000000)); // 1MB limit
      }
    }
    
    // Calls rules - UPDATED FOR BETTER PERMISSIONS
    match /calls/{callId} {
      // Allow read/write if the user is a participant in the call
      allow read, write: if request.auth != null && 
                          (request.auth.uid in resource.data.participants || 
                           request.resource.data.participants[0] == request.auth.uid || 
                           request.resource.data.participants[1] == request.auth.uid);
      
      // Allow creation of new calls
      allow create: if request.auth != null;
      
      // Allow candidates subcollection for WebRTC
      match /candidates/{candidateId} {
        allow read, write: if request.auth != null;
      }
    }
    
    // Active call references - UPDATED FOR BETTER PERMISSIONS
    match /activeCall/{userId} {
      // Allow read/write for all authenticated users
      allow read, write: if request.auth != null;
    }
    
    // Prescriptions rules
    match /prescriptions/{prescriptionId} {
      // Allow read if the user is the patient or doctor
      allow read: if request.auth != null && 
                  (request.auth.uid == resource.data.patientId || 
                   request.auth.uid == resource.data.doctorId);
      
      // Allow create if the user is setting themselves as the doctor
      allow create: if request.auth != null && 
                    request.auth.uid == request.resource.data.doctorId;
      
      // Allow update if the user is the doctor
      allow update: if request.auth != null && 
                    request.auth.uid == resource.data.doctorId;
    }
    
    // Medical records rules - simplified and more permissive
    match /medicalRecords/{recordId} {
      // Allow read for all authenticated users (we'll handle access control in the app)
      allow read: if request.auth != null;
      
      // Allow patients to create their own records
      allow create: if request.auth != null;
      
      // Allow patients to update and delete their own records
      allow update, delete: if request.auth != null && 
                            request.auth.uid == resource.data.patientId;
      
      // Allow doctors to update records they have access to (for adding notes)
      allow update: if request.auth != null && 
                    (request.auth.uid == resource.data.patientId || 
                     request.auth.uid in resource.data.sharedWith);
    }
    
    // Notifications rules
    match /notifications/{notificationId} {
      // Allow read if the notification is for the user
      allow read: if request.auth != null && 
                  request.auth.uid == resource.data.userId;
      
      // Allow create for all authenticated users (we'll handle validation in the app)
      allow create: if request.auth != null;
      
      // Allow update if the notification is for the user (for marking as read)
      allow update: if request.auth != null && 
                    request.auth.uid == resource.data.userId;
    }
    
    // Admin access for users with admin role
    match /{document=**} {
      allow read, write: if request.auth != null && 
                          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
  }
}
